@using AMH.Common;
@using AMHAdmin.Pages;
@using System.Web.Optimization;
@using AMHAdmin.Infrastructure;

@Html.AntiForgeryToken()

@{
    ViewBag.Title = "Employees";
}

<link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous" />

<style>
    .checkbox2 {
        width: 25px;
        height: 25px;
    }

    thead {
        background: #0069D9;
        color: white;
    }

    .row {
        margin: 0 !important;
    }

    .activ {
        background: linear-gradient(to right, #0069D9, #0069D9);
        color: white;
    }

    .has-error .checkbox, .has-error .checkbox-inline, .has-error .control-label, .has-error .form-control-feedback, .has-error .help-block, .has-error .radio, .has-error .radio-inline, .has-error.checkbox label, .has-error.checkbox-inline label, .has-error.radio label, .has-error.radio-inline label {
        color: #e73d4a
    }

    .has-error .form-control {
        bUsers-color: #e73d4a;
        -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075)
    }

        .has-error .form-control:focus {
            bUsers-color: #d71b29;
            -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #f2989f;
            box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #f2989f
        }

    .has-error .input-group-addon {
        color: #e73d4a;
        bUsers-color: #e73d4a;
        background-color: #fbe1e3
    }

    .autocomplete-items {
        position: absolute;
        bUsers: 1px solid #d4d4d4;
        bUsers-bottom: none;
        z-index: 99;
        top: 40px;
        left: 0;
        right: 0;
        box-shadow: 0 39px 70px 0 rgba(0, 0, 0, 0.1);
        background-color: #ffffff;
    }

        .autocomplete-items > div {
            padding: 10px;
            cursor: pointer;
            bUsers-bottom: 1px solid #ccc;
        }

            .autocomplete-items > div:hover {
                background: #fbfbfb;
            }

    .addDelete {
        color: black !important;
        background: #e9e9e9 !important;
    }

    .hideDelete {
        display: none !important;
    }

    .text-c-dark {
        color: #000;
    }

    .device-active .active .card {
        background: #157aec;
        cursor: pointer;
    }

    .device-active .active .text-c-dark {
        color: #fff !important;
    }

        .device-active .active .text-c-dark .icon {
            background-color: #0069D9;
            bUsers: none;
        }

    .icon-box {
        background: #eff1f4;
    }

        .icon-box:hover {
            background: #0e67cc !important;
        }

    .btn-primary {
        color: #fff !important;
        background-color: #0596F8 !important;
        border-color: #0596F8 !important;
        box-shadow: inset 0 1px 0 rgb(255 255 255 / 15%), 0 1px 1px rgb(0 0 0 / 8%) !important;
    }

    div.dt-buttons {
        float: right !important;
    }
</style>


<div class="content container-fluid">
    <div class="row">
        <div class="col-8">
            <h5>Employees</h5>
        </div>
    </div>
    <div class="row">
        <div class="col-xxl-12 col-lg-12 col-md-12 col-12 mb-3">
            @Html.AntiForgeryToken()
            <div class="portlet-body table-responsive" id="divAdminUserTable">
                <table class="table table-striped table-bUsersed table-hover" id="AdminUserTable"></table>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="addAdmin" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="title" id="defaultModalLabel">Employees</h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="ManageUserForm" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12 mt-2">
                            <label>Employees Name</label>
                            <input type="hidden" id="employeeId" name="employeeId" />
                            <input type="text" id="EmployeeName" name="EmployeeName" class="form-control" placeholder="Please enter Employees name" />
                        </div>
                        <div class="col-12 mt-2">
                            <label>DOB</label>
                            <input type="date" id="DOB" name="DOB" class="form-control" placeholder="Please enter DOB" />
                        </div>

                        <div class="col-12 mt-2">
                            <label>Phone Number</label>
                            <input type="number" id="PhoneNumber" name="PhoneNumber" class="form-control" placeholder="Please enter phone number" />
                        </div>
                        <div class="col-12 mt-2">
                            <label>Email</label>
                            <input type="email" id="Email" name="Email" class="form-control" placeholder="Please enter email" />
                        </div>
                        <div class="col-12 mt-2">
                            <label>Country</label>
                            @*<input type="number" id="CountryId" name="CountryId" class="form-control" placeholder="Please enter Country" />*@
                            @Html.Raw(Html.DropDownList("CountryName", (IEnumerable<SelectListItem>)ViewBag.MasterCountry_All, new { @Id = "CountryId", @onchange = "SelectState();", @class = "form-control" }))
                        </div>
                        <div class="col-12 mt-2">
                            <label>State</label>
                            @*<input type="number" id="StateId" name="StateId" class="form-control" placeholder="Please enter State" />*@

                            <select id="StateId" name="StateId" class="form-control" onchange="SelectCity();">
                            </select>

                            @*@Html.Raw(Html.DropDownList("StateName", (IEnumerable<SelectListItem>)ViewBag.MasterState_All, new { @Id = "StateId", @class = "form-control", @onchange = "SelectState();" }))*@
                        </div>
                        <div class="col-12 mt-2">
                            <label>City</label>
                            <select id="CityId" name="CityId" class="form-control">
                            </select>
                            @* <input type="number" id="CityId" name="CityId" class="form-control" placeholder="Please enter City" />*@
                            @*@Html.Raw(Html.DropDownList("CityName", (IEnumerable<SelectListItem>)ViewBag.MasterCity_All, new { @Id = "CityId", @class = "form-control",@onchange= "SelectCity();" }))*@
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnSearch" type="submit" class="btn btn-primary saveBtn">Save</button>
                    <button id="loadingsave" class="btn btn-primary loading" type="button" disabled style="display:none;float:right;">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Saving...
                    </button>
                    <button type="button" data-dismiss="modal" class="btn btn-secondary closeBtn">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>



@*<div class="modal" id="UsersFillter" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="title" id="defaultModalLabel">Users Filters</h6>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                        <div class="col-12 mt-2">
                            <label>Name</label>
                            <input type="text" class="form-control" value="" name="admin_name" id="admin_name" placeholder="Enter Here...">
                        </div>
                        <div class="col-12 mt-2">
                            <label>Mobile Number</label>
                            <input type="number" class="form-control" value="" name="admin_mobilenumber" id="admin_mobilenumber" placeholder="Enter Here...">
                        </div>
                        <div class="col-12 mt-2">
                            <label>Email</label>
                            <input type="email" class="form-control" value="" name="admin_email" id="admin_email" placeholder="Enter Here...">
                        </div>
                        <div class="col-12 mt-2">
                            <label for="AdminTypes">Users Type</label>
                            @Html.Raw(Html.DropDownList("admin_typeid", (IEnumerable<SelectListItem>)ViewBag.GetUserTypeAll, new { @Id = "admin_typeid", @class = "form-control" }))
                        </div>
                        <div class="col-12 mt-2">
                            <label>Is Active</label>
                            <select class="form-control" id="admin_isactive" name="admin_isactive">
                                <option value="2" selected>All</option>
                                <option value="1">Active</option>
                                <option value="0">In-Active</option>
                            </select>
                        </div>
                </div>
                <div class="modal-footer">
                    <button id="btnSearch" type="button" class="btn btn-primary saveBtn" onclick="SearchReset(false)">Search</button>
                    <button class="btn btn-primary loading" type="button" disabled style="display:none;float:right;">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Searching...
                    </button>
                    <button type="button" data-dismiss="modal" class="btn btn-secondary closeBtn">Close</button>
                </div>
            </div>
        </div>
    </div>*@
@section Scripts {
    <script>

        $(document).ready(() => {
            AdminUserDataTable.init();

            $("#ManageUserForm").validate({
                rules: {
                    EmployeeName: "required",
                    PhoneNumber: "required",
                    DOB: "required",
                    Email: "required"
                },
                messages: {
                    EmployeeName: {
                        required: "Please enter Employee name",
                    },
                    PhoneNumber: {
                        required: "Please enter phone number",
                    },
                    DOB: {
                        required: "Please enter DOB",
                    },
                    Email: {
                        required: "Please enter email",
                    }
                },

                errorPlacement: function (error, element) {
                    if (element.is(":radio")) {
                        error.appendTo(element.parents(".form-group"));
                    } else {
                        // This is the default behavior
                        error.insertAfter(element);
                    }
                },
                submitHandler: function (form) {
                    AddAdmin();
                }
            });


        });


        var AdminUserDataTable = function () {
            let initTable1 = function () {
                let table = $('#AdminUserTable');

                let oTable = table.dataTable({
                    "stateSave": true,
                    "autoWidth": false,
                    "paging": true,
                    // Internationalisation. For more info refer to http://datatables.net/manual/i18n
                    "language": {
                        "aria": {
                            "sortAscending": ": activate to sort column ascending",
                            "sortDescending": ": activate to sort column descending"
                        },
                        "emptyTable": "No data available in table",
                        "info": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "infoEmpty": "No entries found",
                        "infoFiltered": "(filtered1 from MAX total entries)",
                        //"lengthMenu": "MENU entries",
                        "search": "Search:",
                        "zeroRecords": "No matching records found"
                    },
                    "pageLength": 10,
                    "processing": true,
                    "serverSide": true,
                    "ajax": {
                        async: true,
                        url: '@Url.Action(Actions.Employees_All, Controllers.Employees)',
                        type: "post",
                        data: SearchCriteria(),
                    },
                    "columns": [
                        {
                            "title": "Employee Name", "data": "EmployeeName",
                            "render": function (data, type, row) {
                                let htmlData = "";

                                htmlData = `<p class="mb-0">${row["EmployeeName"]}</p>`;

                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "DOB", "data": "DOB",
                            "render": function (data, type, row) {
                                let htmlData = "";

                                htmlData = `<p class="mb-0">${row["DOB"]}</p>`;

                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Country", "data": "CountryName",
                            "render": function (data, type, row) {
                                let htmlData = "";

                                htmlData = `<p class="mb-0">${row["CountryName"]}</p>`;

                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "State", "data": "StateName",
                            "render": function (data, type, row) {
                                let htmlData = "";

                                htmlData = `<p class="mb-0">${row["StateName"]}</p>`;

                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "City", "data": "CityName",
                            "render": function (data, type, row) {
                                let htmlData = "";

                                htmlData = `<p class="mb-0">${row["CityName"]}</p>`;

                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Email", "data": "Email",
                            "render": function (data, type, row) {
                                let htmlData = "";

                                htmlData = `<p class="mb-0">${row["Email"]}</p>`;

                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Phone Number", "data": "PhoneNumber",
                            "render": function (data, type, row) {
                                let htmlData = "";

                                htmlData = `<p class="mb-0">${row["PhoneNumber"]}</p>`;

                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },

                        {
                            "title": "Is Active ?", "data": "IsActive",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                if (row["Id"] == '@ProjectSession.AdminId') {
                                    if (row["IsActive"] == 1) {
                                        //InactiveMessage
                                        htmlData = `<button onclick="InactiveMessage('${row["Id"]}');" disabled class="badge badge-primary">Active</button>`;
                                    } else {
                                        htmlData = `<button onclick="ActiveMessage('${row["Id"]}');" disabled class="badge badge-danger">In-Active</button>`;
                                    }
                                } else {
                                    if (row["IsActive"] == 1) {
                                        //InactiveMessage
                                        htmlData = `<button onclick="InactiveMessage('${row["Id"]}');" class="badge badge-primary">Active</button>`;
                                    } else {
                                        htmlData = `<button onclick="ActiveMessage('${row["Id"]}');" class="badge badge-danger">In-Active</button>`;
                                    }
                                }
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Action", "data": "Id",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData += `<button class="btn btn-sm btn-outline-secondary mr-2" title="Edit Employees" onclick="ViewAdmin('${btoa(row["Id"])}');"><i class="fa fa-edit"></i></button>`;
                                htmlData += `<button class="btn btn-sm btn-outline-secondary mr-2" title="Delete Employees" onclick="DeleteDocument('${(row["Id"])}');"><i class="fa fa-trash"></i></button>`;
                                //htmlData += `<button class="btn btn-sm btn-outline-secondary mr-2" title="Delete Employees" onclick="DeleteDocument('${btoa(row["Id"])}');"><i class="fa fa-trash"></i></button>`;

                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                    ],
                    // setup buttons extentension: http://datatables.net/extensions/buttons/
                        "buttons": [
                            {
                                text: 'Add Employee',
                                className: 'btn btn-primary mb-3 mt-1 mr-2',
                                action: function (e, dt, node, config) {
                                    AddAdminPopUp();
                                }
                            }
                            //{
                            //    text: 'Filters',
                            //    className: 'btn btn-primary mb-3 mt-1',
                            //    action: function (e, dt, node, config) {
                            //        UserDataFillter();
                            //    }
                            //},
                            //{
                            //    text: 'Reset',
                            //    className: ' mb-3 mt-1 mr-3',
                            //    action: function () {
                            //        SearchReset(true)
                            //    }
                            //}
                        ],

                        // setup responsive extension: http://datatables.net/extensions/responsive/
                        responsive: true,

                        "lengthMenu": [
                            [5, 10, 15, 20, 1000],
                            [5, 10, 15, 20, 1000] // change per page values here
                        ],
                        // set the initial value

                        "dom": "<'row' <'col-md-12'B>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable

                        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
                        // So when dropdowns used the scrollable div should be removed.
                        //"dom": "<'row' <'col-md-12'T>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",
                });
            }

            return {
                //main function to initiate the module
                init: function () {
                    if ($.fn.DataTable.isDataTable("#AdminUserTable")) {
                        $('#AdminUserTable').dataTable().fnDestroy();
                        $('#divAdminUserTable').html('<table class="table table-striped" width="100%" id="AdminUserTable"></table>');
                    }
                    initTable1();
                }
            };
        }();

        //Data fillter function
        function SearchCriteria() {
            try {
                var param = {};
                //param["EmployeeName"] = $("#EmployeeName").val(),
                //param["Email"] = $("#admin_email").val(),
                //param["MobileNumber"] = $("#admin_mobilenumber").val(),
                //param["AdminTypeId"] = $("#admin_typeid").val(),
                //param["IsActive"] = $("#admin_isactive").val()
                return addRequestVerificationToken(param);
            } catch (e) { }
        }

        //function UserDataFillter() {
        //    $('#UsersFillter').modal('show');
        //}

        //function SearchReset(isReset) {

        //    $(".saveBtn").hide();
        //    $(".loading").show();
        //    $(".closeBtn").hide();

        //    if (isReset == true) {
        //        $('#admin_name').val("");
        //        $('#admin_email').val("");
        //        $('#admin_mobilenumber').val("");
        //        $('#admin_typeid').val("");
        //        $('#admin_isactive').val(2);
        //    }

        //    AdminUserDataTable.init();
        //    $('#UsersFillter').modal('hide');
        //    $(".saveBtn").show();
        //    $(".loading").hide();
        //    $(".closeBtn").show();
        //}

        function addRequestVerificationToken(data) {
            data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]').val();
            return data;
        }

        function InactiveMessage(Id) {
            swal({
                title: "Are you sure ?",
                text: "You will be in-activating the user !",
                icon: "warning",
                buttons: true,
                dangerMode: true,
            })
            .then((willupdate) => {
                if (willupdate) {
                    UpdateStatus(Id);
                }
            });
        }

        //ActiveMessage swal function
        function ActiveMessage(Id) {
            swal({
                title: "Are you sure ?",
                text: "You will be activating the user !",
                icon: "warning",
                buttons: true,
                dangerMode: true,
            })
            .then((willupdate) => {
                if (willupdate) {
                    UpdateStatus(Id);
                }
            });
        }

        //status ActiveInActive change function
        function UpdateStatus(id) {
            $.ajax({
                type: "POST",
                url: '@Url.Action(Actions.Employees_ActInAct, Controllers.Employees)',
                data: { Id: id },
                dataType: 'json',
                success: function (response) {
                    AdminUserDataTable.init();
                    if (response.Code == 200) {
                        swal({
                            title: "Success",
                            text: response.Message,
                            icon: "success",
                            timer: 2000
                        })
                    } else {
                        swal({
                            title: "Warning",
                            text: response.Message,
                            icon: "warning"
                        })
                    }
                },
                error: function (error) {
                    swal({
                        title: "Warning",
                        text: response.Message,
                        icon: "warning"
                    })
                }
            });
        }


        function AddAdminPopUp() {
            emptyFormValues();
            var $alertas = $('#addAdmin');
            $alertas.validate().resetForm();
            $alertas.find('.error').removeClass('error');
            $('#addAdmin').modal('show');
        }

        function AddAdmin() {

            //$(".saveBtn").hide();
            //$(".loading").show();
            //$(".closeBtn").hide();
            var userdata = {
                Id: $("#employeeId").val(),
                EmployeeName: $("#EmployeeName").val(),
                DOB: $("#DOB").val(),
                Email: $("#Email").val(),
                PhoneNumber: $("#PhoneNumber").val(),
                CountryId: $("#CountryId").val(),
                StateId: $("#StateId").val(),
                CityId: $("#CityId").val()
            }

            $.ajax({

                type: "POST",
                url: '@Url.Action(Actions.Employees_Upsert, Controllers.Employees)',
                data: userdata,
                dataType: 'json',
                success: function (response) {
                    if (response.Code == 200) {
                        $('#addAdmin').modal('hide');
                        swal({
                            title: "Great !",
                            text: response.Message,
                            icon: "success",
                            timer: 2000
                        })
                        AdminUserDataTable.init();

                    }
                    else {
                        swal("Error !", response.Message , "error");
                    }
                    $(".saveBtn").show();
                    $(".loading").hide();
                    $(".closeBtn").show();
                    $('#addAdmin').modal('hide');

                },
                error: function (error) {
                    swal("Error!", error.Message, "error");
                    $(".saveBtn").show();
                    $(".loading").hide();
                    $(".closeBtn").show();
                }
            });
        }


        function emptyFormValues() {
            $("#employeeId").val(0);
            $("#EmployeeName").val("");
            $("#DOB").val("");
            $("#Email").val("");
            $("#PhoneNumber").val("");
            $("#CountryId").val(0);
            $("#StateId").val(0);
            $("#CityId").val(0);
        }

        function ViewAdmin(id) {
            emptyFormValues();
            var $alertas = $('#addAdmin');
            $alertas.validate().resetForm();
            $alertas.find('.error').removeClass('error');

            if (id != null && id != "") {
                $.ajax({
                type: "POST",
                url: '@Url.Action(Actions.Employees_ById, Controllers.Employees)',
                data: { SMId: id },
                dataType: 'json',
                success: function (response) {
                    if (response.Code == 200) {
                        $("#employeeId").val(response.Item.Id);
                        $("#EmployeeName").val(response.Item.EmployeeName);
                        $("#DOB").val(response.Item.DOB);
                        $("#PhoneNumber").val(response.Item.PhoneNumber);
                        $("#Email").val(response.Item.Email);
                        //$("#Password").val(response.Item.Password);
                        //$("#IsActive").val(response.Item.IsActive.toString());
                        //$("#CountryName").val(response.Item.CountryName);
                        $("#CountryId").val(response.Item.CountryId);
                        
                        //$("#StateName").val(response.Item.StateName);
                        
                        if (response.Item.StateId != null && response.Item.StateId > 0) {
                            SelectState(response.Item.StateId);
                        }
                            //$("#CityName").val(response.Item.CityName);
                        if (response.Item.CityId != null && response.Item.CityId > 0) {
                            SelectCity(response.Item.CityId);
                        }
                        

                        var $alertas = $('#addAdmin');
                        $alertas.validate().resetForm();
                        $alertas.find('.error').removeClass('error');

                        $('#addAdmin').modal('show');
                    } else {
                        swal("Error !", response.Message, "error");
                    }
                },
                error: function (error) {
                    swal("Error !", "Something Went Wrong", "error");
                }
            });
            }
        }

         function DeleteDocument(Id) {
            swal({
                title: "Delete !",
                text: "Are You Sure You want to Delete this Data ?",
                icon: "warning",
                buttons: true,
                dangerMode: true,
            })
            .then((willdelete) => {
                if (willdelete) {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action(Actions.Employees_Delete, Controllers.Employees)',
                        data: { Id: Id },
                        dataType: 'json',
                        success: function (response) {
                            swal("Success !", response.Message, "success");
                            AdminUserDataTable.init();
                        },
                        error: function (error) {
                            console.log('error', error);
                        }
                    })
                }
            });
        }
        function SelectState(CountryId) {
            
            $("#StateId").html("");

            var CountryIdVar = $("#CountryId").val();

             $.ajax({
                type: "POST",
                url: "@Url.Action(Actions.MasterStateDrp, Controllers.Employees)",
                data: { CountryId: CountryIdVar },
                dataType: 'json',
                 success: function (response) {
                     
                    for (var i = 0; i < response.Values.length; i++) {
                        $("#StateId").append(`
                            <option value="${response.Values[i].Id}">${response.Values[i].Name}</option>
                        `)
                     }
                     $("#StateId").val(CountryId);
                   
                 },
                 error: function (error) {
                     console.log('error', error);
                     
                 }

             })
        }

        function SelectCity(StateId) {
            

            $("#CityId").html("");

            var SID = $("#StateId").val();

             $.ajax({
                type: "POST",
                 url: "@Url.Action(Actions.MasterCity, Controllers.Employees)",
                 data: { StateId: SID },
                dataType: 'json',
                 success: function (response) {
                     
                    for (var i = 0; i < response.Values.length; i++) {
                        $("#CityId").append(`
                            <option value="${response.Values[i].Id}">${response.Values[i].Name}</option>
                        `)
                     }
                     $("#CityId").val(StateId);
                     //$("#CityId").selectpicker('val', StateId);
                     //$('.selectpicker').selectpicker('refresh');
                 },
                 error: function (error) {
                     console.log('error', error);
                     
                 }
             })
        }

        @*function SelectCity() {

            $("#CityId").html("");

            var SID = $("#StateId").val();
             $.ajax({
                        type: "POST",
                        url: "@Url.Action(Actions.MasterCity, Controllers.Employees)",
                        data: { StateId: SID },
                        dataType: 'json',
                        success: function (response) {
                            for (var i = 0; i < response. Values.length; i++) {
                                $("#CityId").append(`
                                    <option>${response.Values[i].Name}</option>
                                `)
                            }
                        }
             })
        }*@

    </script>
}
